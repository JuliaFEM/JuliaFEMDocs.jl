var documenterSearchIndex = {"docs":
[{"location":"packages/JuliaFEM/README/#JuliaFEM.jl-an-open-source-solver-for-both-industrial-and-academia-usage-1","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"","category":"section"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"(Image: logo)","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"(Image: DOI) (Image: License) (Image: Gitter) (Image: Build Status) (Image: Coverage Status) (Image: Stable documentation) (Image: Latest documentation) (Image: Issues)","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"JuliaFEM organization web-page: http://www.juliafem.org","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"The JuliaFEM project develops open-source software for reliable, scalable, distributed Finite Element Method.","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"The JuliaFEM software library is a framework that allows for the distributed processing of large Finite Element Models across clusters of computers using simple programming models. It is designed to scale up from single servers to thousands of machines, each offering local computation and storage. The basic design principle is: everything is nonlinear. All physics models are nonlinear from which the linearization are made as a special cases.","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"At the moment, users can perform the following analyses with JuliaFEM: elasticity, thermal, eigenvalue, contact mechanics, and quasi-static solutions. Typical examples in industrial applications include non-linear solid mechanics, contact mechanics, finite strains, and fluid structure interaction problems. For visualization, JuliaFEM uses ParaView which prefers XDMF file format using XML to store light data and HDF to store large data-sets, which is more or less the open-source standard.","category":"page"},{"location":"packages/JuliaFEM/README/#Vision-1","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"Vision","text":"","category":"section"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"On one hand, the vision of the JuliaFEM includes the opportunity for massive parallelization using multiple computers with MPI and threading as well as cloud computing resources in Amazon, Azure and Google Cloud services together with a company internal server. And on the other hand, the real application complexity including the simulation model complexity as well as geometric complexity. Not to forget that the reuse of the existing material models as well as the whole simulation models are considered crucial features of the JuliaFEM package. ","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"Recreating the wheel again is definitely not anybody's goal, and thus we try to use and embrace good practices and formats as much as possible. We have implemented Abaqus / CalculiX input-file format support and maybe will in the future extend to other FEM solver formats. Using modern development environments encourages the user towards fast development time and high productivity. For developing and creating new ideas and tutorials, we have used Jupyter notebooks to make easy-to-use handouts.","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"The user interface for JuliaFEM is Jupyter Notebook, and Julia language itself is a real programming language. This makes it possible to use JuliaFEM as a part of a bigger solution cycle, including for example data mining, automatic geometry modifications, mesh generation, solution, and post-processing and enabling efficient optimization loops.","category":"page"},{"location":"packages/JuliaFEM/README/#Installing-JuliaFEM-1","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"Installing JuliaFEM","text":"","category":"section"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"Inside Julia REPL, type:","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"Pkg.add(\"JuliaFEM\")","category":"page"},{"location":"packages/JuliaFEM/README/#Initial-road-map-1","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"Initial road map","text":"","category":"section"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"JuliaFEM current status: project planning","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"Version Number of degree of freedom Number of cores\n0.1.0 1 000 000 10\n0.2.0 10 000 000 100\n1.0.0 100 000 000 1 000\n2.0.0 1 000 000 000 10 000\n3.0.0 10 000 000 000 100 000","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"We strongly believe in the test driven development as well as building on top of previous work. Thus all the new code in this project should be 100% tested. Also other people have wisdom in style as well:","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"The Zen of Python:","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"Beautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nErrors should never pass silently.","category":"page"},{"location":"packages/JuliaFEM/README/#Citing-1","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"Citing","text":"","category":"section"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"If you like using our package, please consider citing our article","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"@article{frondelius2017juliafem,\n  title={JuliaFEM - open source solver for both industrial and academia usage},\n  volume={50}, \n  url={https://rakenteidenmekaniikka.journal.fi/article/view/64224},\n  DOI={10.23998/rm.64224},\n  number={3},\n  journal={Rakenteiden Mekaniikka},\n  author={Frondelius, Tero and Aho, Jukka},\n  year={2017},\n  pages={229-233}\n}","category":"page"},{"location":"packages/JuliaFEM/README/#Contributing-1","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"Contributing","text":"","category":"section"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"Developing JuliaFEM encourages good practices, starting from unit testing both for smaller and larger functions and continuing to full integration testing of different platforms. ","category":"page"},{"location":"packages/JuliaFEM/README/#","page":"JuliaFEM.jl - an open source solver for both industrial and academia usage","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"Interested in participating? Please start by reading contributing.","category":"page"},{"location":"packages/JuliaFEM/links/#Links-1","page":"Links","title":"Links","text":"","category":"section"},{"location":"packages/JuliaFEM/links/#Discretization-1","page":"Links","title":"Discretization","text":"","category":"section"},{"location":"packages/JuliaFEM/links/#","page":"Links","title":"Links","text":"http://code.activestate.com/recipes/579021-delaunay-triangulation/","category":"page"},{"location":"packages/JuliaFEM/links/#Interpolation-1","page":"Links","title":"Interpolation","text":"","category":"section"},{"location":"packages/JuliaFEM/links/#","page":"Links","title":"Links","text":"http://www.cs.rpi.edu/~flaherje/pdf/fea4.pdf\nhttp://www.sd.ruhr-uni-bochum.de/downloads/Shape_funct.pdf\nhttp://what-when-how.com/the-finite-element-method/fem-for-3d-solids-finite-element-method-part-1/\nhttp://www.uni-tuebingen.de/zag/teaching/environmentalmodeling/S4BFiniteElements.pdf\nhttp://www.colorado.edu/engineering/CAS/courses.d/AFEM.d/AFEM.Ch10.d/AFEM.Ch10.pdf\nhttp://www.colorado.edu/engineering/CAS/courses.d/AFEM.d/AFEM.Ch10.d/AFEM.Ch10.Slides.d/AFEM.Ch10.Slides.pdf\nhttp://www.colorado.edu/engineering/CAS/courses.d/AFEM.d/AFEM.AppI.d/AFEM.AppI.pdf\nhttp://www.code-aster.org/V2/doc/default/en/man_r/r3/r3.01.01.pdf\nhttp://www.researchgate.net/publication/267082822Unifiedisoparametric3DLagrangefiniteelements","category":"page"},{"location":"packages/JuliaFEM/links/#Integration-1","page":"Links","title":"Integration","text":"","category":"section"},{"location":"packages/JuliaFEM/links/#","page":"Links","title":"Links","text":"http://arxiv.org/pdf/1411.1341.pdf","category":"page"},{"location":"packages/JuliaFEM/links/#Hierarchial-shape-functions-1","page":"Links","title":"Hierarchial shape functions","text":"","category":"section"},{"location":"packages/JuliaFEM/links/#","page":"Links","title":"Links","text":"https://www.math.vt.edu/people/adjerids/research/papers/basis.pdf","category":"page"},{"location":"packages/JuliaFEM/links/#Solvers-1","page":"Links","title":"Solvers","text":"","category":"section"},{"location":"packages/JuliaFEM/links/#","page":"Links","title":"Links","text":"https://github.com/JuliaSparse/MultiFrontalCholesky.jl","category":"page"},{"location":"packages/HeatTransfer/README/#","page":"Home","title":"Home","text":"(Image: Build Status)(Image: Coverage Status)(Image: )(Image: )(Image: Issues)","category":"page"},{"location":"packages/HeatTransfer/README/#","page":"Home","title":"Home","text":"This package extends JuliaFEM functionalities to solve heat transfer problems.","category":"page"},{"location":"packages/JuliaFEM/examples/#Simple-usage-examples-1","page":"Simple usage examples","title":"Simple usage examples","text":"","category":"section"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"A simple example demonstrating the basic usage of package. Calculate a simple one element model. Add pressure load on top and support block symmetrically.","category":"page"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"using JuliaFEM # hide\nX = Dict(\n    1 => [0.0, 0.0],\n    2 => [1.0, 0.0],\n    3 => [1.0, 1.0],\n    4 => [0.0, 1.0])","category":"page"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"element = Element(Quad4, [1, 2, 3, 4])\nupdate!(element, \"geometry\", X)\nupdate!(element, \"youngs modulus\", 288.0)\nupdate!(element, \"poissons ratio\", 1/3)","category":"page"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"First define a field problem and add element to it","category":"page"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"body = Problem(Elasticity, \"test problem\", 2)\nupdate!(body.properties,\n    \"formulation\" => \"plane_stress\",\n    \"finite_strain\" => \"false\",\n    \"geometric_stiffness\" => \"false\")\nbody.elements = [element]","category":"page"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"Then create element to carry on pressure","category":"page"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"tr_el = Element(Seg2, [3, 4])\nupdate!(tr_el, \"geometry\", X)\nupdate!(tr_el, \"displacement traction force 2\", 288.0)\ntraction = Problem(Elasticity, \"pressure on top of block\", 2)\nupdate!(traction.properties,\n    \"formulation\" => \"plane_stress\",\n    \"finite_strain\" => \"false\",\n    \"geometric_stiffness\" => \"false\")\ntraction.elements = [tr_el]","category":"page"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"Create boundary condition to support block at bottom and left","category":"page"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"bc_el_1 = Element(Seg2, [1, 2])\nbc_el_2 = Element(Seg2, [4, 1])\nupdate!(bc_el_1, \"displacement 2\", 0.0)\nupdate!(bc_el_2, \"displacement 1\", 0.0)\nbc = Problem(Dirichlet, \"add symmetry bc\", 2, \"displacement\")\nbc.elements = [bc_el_1, bc_el_2]","category":"page"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"Last thing is to create a solver, push problem to solver and solve:","category":"page"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"solver = Solver(Linear, body, traction, bc)\nsolver()","category":"page"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"Displacement in node 3 is","category":"page"},{"location":"packages/JuliaFEM/examples/#","page":"Simple usage examples","title":"Simple usage examples","text":"solver(\"displacement\", 0.0)[3]","category":"page"},{"location":"packages/HeatTransfer/#HeatTransfer.jl-1","page":"Docs","title":"HeatTransfer.jl","text":"","category":"section"},{"location":"packages/HeatTransfer/#","page":"Docs","title":"Docs","text":"HeatTransfer.jl extends JuliaFEM functionalities to solve heat transfer problems.","category":"page"},{"location":"packages/HeatTransfer/#Theory-1","page":"Docs","title":"Theory","text":"","category":"section"},{"location":"packages/HeatTransfer/#","page":"Docs","title":"Docs","text":"The heat equation is a parabolic partial differential equation that describes the distribution of heat (or variation in temperature) in a given region over time. The state equation, given by the first law of thermodynamics (i.e. conservation of energy), is written in the following form (assuming no mass transfer or radiation). This form is more general and particularly useful to recognize which property (e.g. c_p or rho) influences which term. State equations is","category":"page"},{"location":"packages/HeatTransfer/#","page":"Docs","title":"Docs","text":"rho c_pfracpartial Tpartial t-nablacdotleft(knabla Tright)=dotq_V","category":"page"},{"location":"packages/HeatTransfer/#","page":"Docs","title":"Docs","text":"where dotq_V is the volumetric heat source.","category":"page"},{"location":"packages/HeatTransfer/#Features-1","page":"Docs","title":"Features","text":"","category":"section"},{"location":"packages/HeatTransfer/#","page":"Docs","title":"Docs","text":"PlaneHeat. Thermal conductivity k can be set using field thermal conductivity. Volumetric heat source dotq_V can be set using field heat source. Heat flux for boundary can be set using field heat flux. ","category":"page"},{"location":"packages/HeatTransfer/#References-1","page":"Docs","title":"References","text":"","category":"section"},{"location":"packages/HeatTransfer/#","page":"Docs","title":"Docs","text":"Heat equation. (2018, January 5). In Wikipedia, The Free Encyclopedia. Retrieved 00:49, January 30, 2018, from https://en.wikipedia.org/w/index.php?title=Heat_equation&oldid=818847673\nHeat transfer. (2018, January 26). In Wikipedia, The Free Encyclopedia. Retrieved 00:48, January 30, 2018, from https://en.wikipedia.org/w/index.php?title=Heat_transfer&oldid=822415173","category":"page"},{"location":"packages/JuliaFEM/#JuliaFEM.jl-documentation-1","page":"JuliaFEM.jl documentation","title":"JuliaFEM.jl documentation","text":"","category":"section"},{"location":"packages/JuliaFEM/#","page":"JuliaFEM.jl documentation","title":"JuliaFEM.jl documentation","text":"Pages = [\"index.md\", \"api.md\"]","category":"page"},{"location":"packages/JuliaFEM/#","page":"JuliaFEM.jl documentation","title":"JuliaFEM.jl documentation","text":"The JuliaFEM project develops open-source software for reliable, scalable, distributed Finite Element Method.","category":"page"},{"location":"packages/JuliaFEM/#","page":"JuliaFEM.jl documentation","title":"JuliaFEM.jl documentation","text":"The JuliaFEM software library is a framework that allows for the distributed processing of large Finite Element Models across clusters of computers using simple programming models. It is designed to scale up from single servers to thousands of machines, each offering local computation and storage. The basic design principle is: everything is nonlinear. All physics models are nonlinear from which the linearization are made as a special cases. ","category":"page"},{"location":"packages/JuliaFEM/#Installing-and-testing-package-1","page":"JuliaFEM.jl documentation","title":"Installing and testing package","text":"","category":"section"},{"location":"packages/JuliaFEM/#","page":"JuliaFEM.jl documentation","title":"JuliaFEM.jl documentation","text":"Installing package goes same way like other packages in julia, i.e.","category":"page"},{"location":"packages/JuliaFEM/#","page":"JuliaFEM.jl documentation","title":"JuliaFEM.jl documentation","text":"julia> Pkg.add(\"JuliaFEM\")","category":"page"},{"location":"packages/JuliaFEM/#","page":"JuliaFEM.jl documentation","title":"JuliaFEM.jl documentation","text":"Testing package can be done using Pkg.test, i.e.","category":"page"},{"location":"packages/JuliaFEM/#","page":"JuliaFEM.jl documentation","title":"JuliaFEM.jl documentation","text":"julia> Pkg.test(\"JuliaFEM\")","category":"page"},{"location":"packages/JuliaFEM/#Contributing-1","page":"JuliaFEM.jl documentation","title":"Contributing","text":"","category":"section"},{"location":"packages/JuliaFEM/#","page":"JuliaFEM.jl documentation","title":"JuliaFEM.jl documentation","text":"Have a new great idea and want to share it with the open source community? From here and here you can look for coding style. Here is explained how to contribute to open source project, in general.","category":"page"},{"location":"packages/JuliaFEM/features/#","page":"-","title":"-","text":"=============== FEATURES / TODO ===============","category":"page"},{"location":"packages/JuliaFEM/features/#","page":"-","title":"-","text":"Parallel design\nSparse matrices\nDiscontinuous Galerkin?\n100% Tested\nAutomatic coverage (Travis CI)\nDoctest examples and tutorials\nIntuitive to use\nMarketing\nEngineering porn\nField functions\nMultiphysics platform\nElasticity\nThermal implemented\nTransient and steady solvers\nImplicit dynamics\nNonlinearities\nGeometrical\nMaterial\nContact\nMortar\nModular design\nE.g. contact formulation can be altered by user\nMesh and results format, Xdmf?\nNo scalars but field variables, e.g. no constant 210GPa for steel, we interpolate variable from nodes.\n(Constant is a special case of field variable).","category":"page"},{"location":"#JuliaFEM.jl-an-open-source-solver-for-both-industrial-and-academia-usage-1","page":"Home","title":"JuliaFEM.jl - an open source solver for both industrial and academia usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: logo)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: DOI) (Image: License) (Image: Gitter) (Image: Build Status) (Image: Coverage Status) (Image: Stable documentation) (Image: Latest documentation) (Image: Issues)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"JuliaFEM organization web-page: http://www.juliafem.org","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The JuliaFEM project develops open-source software for reliable, scalable, distributed Finite Element Method.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The JuliaFEM software library is a framework that allows for the distributed processing of large Finite Element Models across clusters of computers using simple programming models. It is designed to scale up from single servers to thousands of machines, each offering local computation and storage. The basic design principle is: everything is nonlinear. All physics models are nonlinear from which the linearization are made as a special cases.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"At the moment, users can perform the following analyses with JuliaFEM: elasticity, thermal, eigenvalue, contact mechanics, and quasi-static solutions. Typical examples in industrial applications include non-linear solid mechanics, contact mechanics, finite strains, and fluid structure interaction problems. For visualization, JuliaFEM uses ParaView which prefers XDMF file format using XML to store light data and HDF to store large data-sets, which is more or less the open-source standard.","category":"page"},{"location":"#Vision-1","page":"Home","title":"Vision","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"On one hand, the vision of the JuliaFEM includes the opportunity for massive parallelization using multiple computers with MPI and threading as well as cloud computing resources in Amazon, Azure and Google Cloud services together with a company internal server. And on the other hand, the real application complexity including the simulation model complexity as well as geometric complexity. Not to forget that the reuse of the existing material models as well as the whole simulation models are considered crucial features of the JuliaFEM package. ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Recreating the wheel again is definitely not anybody's goal, and thus we try to use and embrace good practices and formats as much as possible. We have implemented Abaqus / CalculiX input-file format support and maybe will in the future extend to other FEM solver formats. Using modern development environments encourages the user towards fast development time and high productivity. For developing and creating new ideas and tutorials, we have used Jupyter notebooks to make easy-to-use handouts.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The user interface for JuliaFEM is Jupyter Notebook, and Julia language itself is a real programming language. This makes it possible to use JuliaFEM as a part of a bigger solution cycle, including for example data mining, automatic geometry modifications, mesh generation, solution, and post-processing and enabling efficient optimization loops.","category":"page"},{"location":"#Installing-JuliaFEM-1","page":"Home","title":"Installing JuliaFEM","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Inside Julia REPL, type:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg.add(\"JuliaFEM\")","category":"page"},{"location":"#Initial-road-map-1","page":"Home","title":"Initial road map","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"JuliaFEM current status: project planning","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Version Number of degree of freedom Number of cores\n0.1.0 1 000 000 10\n0.2.0 10 000 000 100\n1.0.0 100 000 000 1 000\n2.0.0 1 000 000 000 10 000\n3.0.0 10 000 000 000 100 000","category":"page"},{"location":"#","page":"Home","title":"Home","text":"We strongly believe in the test driven development as well as building on top of previous work. Thus all the new code in this project should be 100% tested. Also other people have wisdom in style as well:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The Zen of Python:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Beautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nErrors should never pass silently.","category":"page"},{"location":"#Citing-1","page":"Home","title":"Citing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you like using our package, please consider citing our article","category":"page"},{"location":"#","page":"Home","title":"Home","text":"@article{frondelius2017juliafem,\n  title={JuliaFEM - open source solver for both industrial and academia usage},\n  volume={50}, \n  url={https://rakenteidenmekaniikka.journal.fi/article/view/64224},\n  DOI={10.23998/rm.64224},\n  number={3},\n  journal={Rakenteiden Mekaniikka},\n  author={Frondelius, Tero and Aho, Jukka},\n  year={2017},\n  pages={229-233}\n}","category":"page"},{"location":"#Contributing-1","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Developing JuliaFEM encourages good practices, starting from unit testing both for smaller and larger functions and continuing to full integration testing of different platforms. ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Interested in participating? Please start by reading contributing.","category":"page"},{"location":"packages/JuliaFEM/api/#API-documentation-1","page":"API documentation","title":"API documentation","text":"","category":"section"},{"location":"packages/JuliaFEM/api/#Index-1","page":"API documentation","title":"Index","text":"","category":"section"},{"location":"packages/JuliaFEM/api/#","page":"API documentation","title":"API documentation","text":"","category":"page"},{"location":"packages/JuliaFEM/api/#","page":"API documentation","title":"API documentation","text":"DocTestSetup = quote\n    using JuliaFEM\nend","category":"page"},{"location":"packages/JuliaFEM/api/#Types-1","page":"API documentation","title":"Types","text":"","category":"section"},{"location":"packages/JuliaFEM/api/#","page":"API documentation","title":"API documentation","text":"JuliaFEM.Element\nJuliaFEM.Problem\nJuliaFEM.Elasticity","category":"page"},{"location":"packages/JuliaFEM/api/#Functions-1","page":"API documentation","title":"Functions","text":"","category":"section"},{"location":"packages/JuliaFEM/api/#","page":"API documentation","title":"API documentation","text":"JuliaFEM.update!","category":"page"}]
}
